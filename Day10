this关键字和super关键字的区别
    （1）this关键字
        a.代表当前这个对象
        b.可以访问本类中的实例变量、实例方法，也可以访问文本类中的其他构造方法
        c.还可以访问父类中的实例变量、实例方法
    （2）super关键字
        a.表示超类或父类
        b.只能在子类中使用，也可以访问父类中的实例变量、实例方法、还可以访问父类的构造方法

当实例化子类时父类做了什么
    （1）先执行父类的构造方法，然后再执行子类的相匹配构造方法
        a.如果子类构造方法中没有指明则默认调用父类无参构造方法
        b.如果子类构造方法中指明调用父类哪个构造方法，则先执行父类相匹配的构造方法，然后再执行子类相匹配的构造方法
        c.建议：当手动编写构造方法时，先编写无参构造方法，再编写所需要的构造方法



多态：
    （1）多态的语法格式：
				父类类名 引用名称 = new 子类类名();
			注意：当是多态时，该引用名称只能访问父类中的属性和方法,但是优先访问子类型重写以后的方法
		（2）多态：将多个对象调用同一个方法，得到不同的结果
    （3）满足多态的条件：
        a.子类必须继承父类
        b.子类重写父类的方法
        c.父类类名 引用名称 = new 子类类名();


多态好处：减少代码的冗余性


多态中两种类型的转换：
    （1）向上转型，也叫自动类型转换，构成多态
        a.父类类名 引用名称 = new 子类类名();
        b.当是多态时，该引用名称只能访问父类中的属性和方法,但是优先访问子类型重写以后的方法
    （2）向下转型，也叫强制类型转换
        a.当是多态时，并且访问子类独有的属性或方法时，则必须进行向下转型
        b.当进行向下转型时，建议先进行判断，当合法则转为对应的类型，则使用instanceof关键字否则可能会出现类型转换异常：java.lang.ClassCastException

递归：
    （1）方法自己调用自己，必须保证有出口
    （2）案例：使用递归完成，计算n！











基本数据类型：分为4大类，共计8种
整数类型：byte  short  int  long
    （1）整数类型默认为int
    （2）整数类型各自取值范围
    （3）在Java中，当对byte short char类型赋值时，如果没有超出该类型取值范围则可以直接赋值
    （4）在Java中，取值范围小的类型可以直接赋给取值范围大的类型，构成自动类型转换
        long d = 6;//构成自动类型转换
        d = 12345678909; //出现编译错误。因为默认值为int，超出int的取值范围
		    解决办法：将右侧的值后面添加L或l，此时该值为long，也就是说该值就为long类型
        d = 12345678909L; //没有成自动类型转换
浮点类型： float  double
      浮点类型被默认为double类型
      float y = 0.87; //出现编辑错误,原因：在Java中，取值范围大的类型不能直接给取值范围小的类型赋值
		  解决方法第一种方法：将0.87，也就是在该值后面添加f或F，然后再给左侧float类型赋值
		  float y = 0.87f; //没有成自动类型转换
		  解决办法第二种方法：当取值范围大的类型赋给取值范围小的类型时，必须进行强制类型转换，也就是说在该值前面添加（目标类型）
		  float y = (float)0.87;//构成强制类型转换
字符类型：char（一次只能存放一个，并且使用英文的单引号引起来；一个汉字表是一个字符；整数类型与字符类型之间是可以进行相互转换的；字符类型取值范围的：0----65535，占两个字节）
布尔类型：boolean（两种取值，分别为true、false;就占一个字节）


类型之间转换：
      自动类型转换（隐式类型转换）：取值范围小的类型可以直接赋给取值范围大的类型
      强制类型转换（显式类型转换）：当取值范围大的类型赋给取值范围小的类型时，必须进行强制类型转换，但是仅是进行强制转换时可能存在精度丢失
类型转换6条规则：
     （1）基本数据类型中除了boolean类型以外，剩余7种类型可以进行相互转换
     （2）只要取值范围小的赋给取值范围大的类型，构成自动转换类型（按从小到大顺序：byte short char int long float double）
     （3）当取值范围大的类型不能直接赋给取值范围小的类型时，必须进行强制类型转换，但是仅是进行强制转换时可能存在精度丢失
     （4）当对byte short char类型赋值时，如果没有超出该类型取值范围则可以进行直接赋值
     （5）当对byte short char类型进行混合运算时，则先转为int类型后再进行计算
     （6）当对多种数据类型进行混合运算时，则转换为取值范围大类型，然后再进行计算

算数运算符：+ - * /  %(求余数，取模运算)  ++  -- 
     （1）+:当+两边的操作数都是数据类型,则做加法运算;当+两边的操作数中有一个为非数值类型,则做连接,最终结果为string
     （2）-:当作减法运算时,必须保证两个操作数都为数据类型
     （3）*:
     （4）/:
     （5）%：
     （6）++：
         a.表示自身加1；
         b.又分为前置++：将++编写在变量名称前面，先做自身加1，然后再做其他运算（int a = 3； ++a；//a = 4 b = 4）；
                 后置++：将++编写在变量名称后面，先做其他运算，然后在自身加1（int x = 5； x++；）
                 
     （7）--：
         a.表示自身减1；
         b.又分为前置++：将++编写在变量名称前面，先做自身减1，然后再做其他运算（int a = 3； --a；//a = 1 b = 1）；
                 后置++：将++编写在变量名称后面，先做其他运算，然后在自身减1（int x = 5； x--；）
连接运算符：+（作用：求和、连接）
赋值运算符：
     （1）=（将右侧的值赋给左侧的变量名称）
     （2）扩展赋值运算符：+-   -=   *=     /=  %=
         当是扩展赋值运算符时,变量的最终的数据类型没有发生改变
关系运算符：>  <    >=    <=     ==   !=
     （1）关系运算符:最终结果为布尔类型的值
     （2）优先级别:算数运算符>关系运算符>赋值运算符
逻辑运算符:逻辑与&、逻辑或|、逻辑异或^、逻辑非!、短路与&&、短路或|| [逻辑运算符：最终结果均为布尔类型的值]
     （1）逻辑与&：表示并且（当两个条件同时为true时，则结果为true，否则为false）
     （2）逻辑或|：表示或者（当两个条件中有一个为true，则结果为true，否则为false）
     （3）逻辑异或^：当两个条件的值不同时，则结果为true，否则为false（true ^ true-------->false；true ^ false-------->true）
     （4）逻辑非!：表示对布尔类型的值进行取反
     （5）短路与&&：类似于逻辑与，都表并且
         优先级别:算数运算符>关系运算符>逻辑运算符；
         总结:短路与跟逻辑与运行结果都一样,但是执行过程可能不同,当使用短路与,并且第一个条件为false,则结果直接为false
         建议：使用短路与
     （6）短路或||：类似于逻辑或，都表示或者
         总结:短路或跟逻辑与运行结果都一样,但是执行过程可能不同,当使用短路或,并且第一个条件为true,则结果直接为true
         建议：使用短路或
=与==、&与&&、|与||区别：
     （1）= 属于赋值运算符，将右侧的值赋给左侧的变量名称；
         == 属于关系运算符，判断左右两边是否相等，结果为boolean类型
     （2）&与&&
         &是逻辑与，&&是短路与，都属于逻辑运算符，都表示并且，执行结果都相同；
         当使用短路与，并且第一个条件为false时，则结果直接为false
     （3）|与||
         |是逻辑或||
三目运算符：（也成为条件运算符）语法格式：条件？代码1：代码2

键盘接收用户输入：
     （1）导入包,必须位于Java 源文件的第一行（import java.util.Scanner;）
     （2）创建Scanner对象（Scanner input = new Scanner(System.in);）
     （3）友好提示（System.out.println("请输入: ");）
     （4）键盘输入（int num = input.nextInt(); 
    //注意:等待用户接收键盘输入值,当按回车键,则表示输入完毕,并将回车之前所输入的内容赋给左侧的变量）
          double score = input.nextDouble();
          String name = input.next();  //注意:在Java中,键盘接收字符串类型时没有nextString(),而使用的是next()
          String s = input.next();  //注意:在Java中,键盘不能直接接收字符类型,而是先接收字符串类型,然后在字符串中获取第0个位置中的值,则使用charAt(0)
          char sex = s.charAt(0);
          
          




    
